<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Intermediate on iac security Training</title><link>/docs/04/</link><description>Recent content in Intermediate on iac security Training</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="/docs/04/index.xml" rel="self" type="application/rss+xml"/><item><title>Versions</title><link>/docs/04/1-versions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/04/1-versions/</guid><description>Preparation Finish the Data Sources exercise and copy the directory:
mkdir -p $LAB_ROOT/intermediate/ cp -r $LAB_ROOT/basics/data_sources $LAB_ROOT/intermediate/versions cd $LAB_ROOT/intermediate/versions Step 4.1.1: Create versions.tf Create a new file named versions.tf and add the following content:
terraform { required_version = &amp;#34;= 1.0.5&amp;#34; required_providers { random = { source = &amp;#34;hashicorp/random&amp;#34; version = &amp;#34;= 3.1.0&amp;#34; } local = { source = &amp;#34;hashicorp/local&amp;#34; version = &amp;#34;= 2.1.0&amp;#34; } } } Explanation With multiple engineers working on the same infrastructure code base, it is inevitable to have different versions of the Terraform CLI installed.</description></item><item><title>Count / Loops</title><link>/docs/04/2-count-loops/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/04/2-count-loops/</guid><description>Preparation Create a new directory for this exercise:
mkdir -p $LAB_ROOT/intermediate/count_loops cd $LAB_ROOT/intermediate/count_loops Step 4.2.1: Conditional resource By adding the identifier count to a resource, you can either make the resource conditional or create multiple instances.
Create a new file named elvis.tf in your working directory and paste the following:
locals { create_password = false } resource &amp;#34;random_password&amp;#34; &amp;#34;optional_password&amp;#34; { count = local.create_password ? 1 : 0 length = 16 } output &amp;#34;optional_password&amp;#34; { sensitive = true value = local.</description></item><item><title>Backend State</title><link>/docs/04/3-backend-state/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/04/3-backend-state/</guid><description>Preparation Create a new directory for this exercise:
mkdir -p $LAB_ROOT/intermediate/backend_state cd $LAB_ROOT/intermediate/backend_state Step 4.3.1: Define a backend Create a new file named main.tf and add the following content:
terraform { backend &amp;#34;local&amp;#34; { path = &amp;#34;foobar.tfstate&amp;#34; } } resource &amp;#34;random_password&amp;#34; &amp;#34;super_secret&amp;#34; { length = 16 } Run the commands
terraform init terraform apply After the apply run:
ls -al Now you should see a local file named foobar.tfstate containing the Terraform state.</description></item><item><title>Config Files</title><link>/docs/04/4-config-files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/04/4-config-files/</guid><description>Preparation Create a new directory for this exercise:
mkdir -p $LAB_ROOT/intermediate/multi_env cd $LAB_ROOT/intermediate/multi_env Step 4.4.1: Define variable and output Create a new file named variables.tf and add the following content:
variable &amp;#34;environment&amp;#34; {} Create a new file named outputs.tf and add the following content:
output &amp;#34;current_env&amp;#34; { value = var.environment } Create a new file named main.tf and add the following content:
terraform { backend &amp;#34;local&amp;#34; {} } Explanation The backend of type local is declared but missing the path argument; this is a so-called &amp;ldquo;partial configuration&amp;rdquo;.</description></item></channel></rss>