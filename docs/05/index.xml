<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Advanced on iac security Training</title><link>/docs/05/</link><description>Recent content in Advanced on iac security Training</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="/docs/05/index.xml" rel="self" type="application/rss+xml"/><item><title>Modules</title><link>/docs/05/1-modules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/05/1-modules/</guid><description>Preparation Create a new directory for this exercise:
mkdir -p $LAB_ROOT/advanced/modules cd $LAB_ROOT/advanced/modules Step 5.1.1: Define the module A local module resides in its own directory, lets create one be running:
mkdir random_file Create a new file named random_file/variables.tf and add the following content:
variable &amp;#34;extension&amp;#34; {} variable &amp;#34;size&amp;#34; {} Create a new file named random_file/main.tf and add the following content:
resource &amp;#34;random_pet&amp;#34; &amp;#34;filename&amp;#34; { } resource &amp;#34;random_password&amp;#34; &amp;#34;content&amp;#34; { length = var.</description></item><item><title>Meta-Arguments</title><link>/docs/05/2-meta-arguments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/05/2-meta-arguments/</guid><description>Preparation Create a new directory for this exercise:
mkdir -p $LAB_ROOT/advanced/meta_arguments cd $LAB_ROOT/advanced/meta_arguments Step 5.2.1: Missing dependency Sometimes Terraform can not imply the dependency between resources explicitly. For such cases, a dependency is added to one or multiple resources or data sources. Consider the following snippets.
Create a new file named main.tf and add the following content:
resource &amp;#34;local_file&amp;#34; &amp;#34;foobar_txt&amp;#34; { content = &amp;#34;4thelulz&amp;#34; filename = &amp;#34;foobar.txt&amp;#34; } data &amp;#34;local_file&amp;#34; &amp;#34;reference&amp;#34; { filename = &amp;#34;foobar.</description></item><item><title>Various</title><link>/docs/05/3-various/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/05/3-various/</guid><description>Preparation Create a new directory for this exercise:
mkdir $LAB_ROOT/advanced/various cd $LAB_ROOT/advanced/various Step 5.3.1: Variable structure Terraform variables support nested complex types like nested maps and sets. The type keyword of the variable block allows the definition of type constraints to enforce the correctness of the input (or default) value. See https://developer.hashicorp.com/terraform/language/expressions/type-constraints for the specification.
Create a new file named variables.tf and add the following content:
variable &amp;#34;clouds&amp;#34; { default = { aws = { company = &amp;#34;Amazon&amp;#34; founder = &amp;#34;Jeff Bezos&amp;#34; cloud_rank = 1 } azure = { company = &amp;#34;Microsoft&amp;#34; founder = &amp;#34;Bill Gates&amp;#34; cloud_rank = 2 } gcp = { company = &amp;#34;Google&amp;#34; founder = &amp;#34;Larry Page and Sergey Brin&amp;#34; cloud_rank = 3 } } type = map(object({ company = string founder = string cloud_rank = number })) } The code snippet above defines a map for the top three cloud platforms with three attributes:</description></item><item><title>Templates</title><link>/docs/05/4-templates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/05/4-templates/</guid><description>Preparation Create a new directory for this exercise:
mkdir $LAB_ROOT/advanced/templates cd $LAB_ROOT/advanced/templates Step 5.4.1: Multiline strings Sometimes you&amp;rsquo;d like to construct multiline strings while avoiding \n escape sequences for readability.
Terraform offers so called &amp;ldquo;heredoc&amp;rdquo; style string literals to achieve that. The full documentation can be found at https://www.terraform.io/docs/language/expressions/strings.html Create a new file named variables.tf and add the following content:
variable &amp;#34;action&amp;#34; { default = &amp;#34;fun&amp;#34; } Create a new file named outputs.</description></item><item><title>Terraform CLI</title><link>/docs/05/5-terraform-operations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/05/5-terraform-operations/</guid><description>There are many more topics regarding Terraform. Here we will a have look over some of them:
state inspection state remove import debugging tflint Task 5.5.1: State Inspection As you have learned, the Terraform state represents the applied objects that have been successfully applied. Here is the example from our first applied config:
{ &amp;#34;version&amp;#34;: 4, &amp;#34;terraform_version&amp;#34;: &amp;#34;1.0.0&amp;#34;, &amp;#34;serial&amp;#34;: 1, &amp;#34;lineage&amp;#34;: &amp;#34;e16466b0-a1f7-f0d0-ac77-263f52a3a511&amp;#34;, &amp;#34;outputs&amp;#34;: {}, &amp;#34;resources&amp;#34;: [ { &amp;#34;mode&amp;#34;: &amp;#34;managed&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;random_integer&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;acr&amp;#34;, &amp;#34;provider&amp;#34;: &amp;#34;provider[\&amp;#34;registry.</description></item><item><title>tfsec</title><link>/docs/05/6-tfsec/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/05/6-tfsec/</guid><description>There tools to help detect common misconfigurations in terraform, on such tools is tfsec which has become part of the familiar trivy suite.
Task 5.6.1: Create a Terraform Configuration with a Misconfiguration As you have learned, the Terraform state represents the applied objects that have been successfully applied. Here is the example from our first applied config:
mkdir $LAB_ROOT/advanced/tfsec cd $LAB_ROOT/advanced/tfsec Create a file named main.tf with the following content:</description></item><item><title>Azure Keyvault</title><link>/docs/05/7-keyvault/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/05/7-keyvault/</guid><description>In a previous module in the CAS you created a (free Azure Account)[text ]. If you have still some free credit on it we can use that to create an Azure Key Vault. The pricing for it you find here :
Task 5.7.1: Create files to provision a Key Vault Create a new directory
mkdir $LAB_ROOT/advanced/keyvault cd $LAB_ROOT/advanced/keyvault Create a file named providers.tf and insert the following code:
terraform { required_version = &amp;#34;&amp;gt;=1.</description></item></channel></rss>